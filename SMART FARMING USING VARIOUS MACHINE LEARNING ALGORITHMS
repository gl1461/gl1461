#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score, mean_squared_error


# In[2]:


# Load dataset (example: crop yield prediction)
crop_data = pd.read_csv('crop_recommdation.csv')
crop_data


# In[3]:


# Preprocess data
X = crop_data.drop('label', axis=1)  # Features
y = crop_data['label']  # Target variable


# In[4]:


# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# In[5]:


# One-hot encode categorical variables
X_encoded = pd.get_dummies(X_train)

# Train-test split with encoded data
X_train_encoded, X_test_encoded, y_train, y_test = train_test_split(X_encoded, y_train, test_size=0.2, random_state=42)

# Logistic Regression model with encoded data
logistic_model = LogisticRegression()
logistic_model.fit(X_train_encoded, y_train)
y_pred_logistic = logistic_model.predict(X_test_encoded)
logistic_accuracy = accuracy_score(y_test, y_pred_logistic)
print("Logistic Regression Accuracy:", logistic_accuracy)


# In[6]:


print("Shape of X_encoded:", X_encoded.shape)
print("Shape of y_train:", y_train.shape)


# In[7]:


from sklearn.model_selection import train_test_split

# One-hot encode categorical variables
X_encoded = pd.get_dummies(X)

# Train-test split with encoded data
X_train_encoded, X_test_encoded, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Support Vector Machine (SVM) model with encoded data
svm_model = SVC(kernel='linear')
svm_model.fit(X_train_encoded, y_train)
y_pred_svm = svm_model.predict(X_test_encoded)
svm_accuracy = accuracy_score(y_test, y_pred_svm)
print("SVM Accuracy:", svm_accuracy)


# In[8]:


# Check the shape of X_encoded
print("Shape of X_encoded:", X_encoded.shape)

# Check if there are any missing values in X_encoded
print("Number of missing values in X_encoded:", X_encoded.isnull().sum())


# Check if there are any missing values in y
print("Number of missing values in y:", y.isnull().sum())




# In[9]:


from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# One-hot encode categorical variables
X_encoded = pd.get_dummies(X)

# Train-test split with encoded data
X_train_encoded, X_test_encoded, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Random Forest model with encoded data
rf_model = RandomForestClassifier()
rf_model.fit(X_train_encoded, y_train)
y_pred_rf = rf_model.predict(X_test_encoded)
rf_accuracy = accuracy_score(y_test, y_pred_rf)
print("Random Forest Accuracy:", rf_accuracy)


# In[10]:


from sklearn.ensemble import RandomForestClassifier


# In[11]:


rf = RandomForestClassifier()


# In[12]:


import pandas as pd


# In[13]:


X=crop_data.drop('label',axis=1)
y=crop_data['label']
X_encoded = pd.get_dummies(X)


# In[14]:


from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(X_encoded,y)


# In[15]:


new_data = pd.DataFrame({
    'temperature':20.87974371,
    'humidity':82.00274423,
    'ph':6.502985292,
    'water availability':202.9355362,
    'season_rainy':0,
    'season_spring':0,
    'season_summer':0,
    'season_winter':0,

},index=[0])


# In[16]:


new_data


# In[17]:


p = rf.predict(new_data)
print(p[0])


# In[18]:


import joblib


# In[19]:


from sklearn.ensemble import RandomForestClassifier


# In[20]:


X=crop_data.drop('label',axis=1)
y=crop_data['label']
X_encoded = pd.get_dummies(X)


# In[21]:


rf = RandomForestClassifier()
rf.fit(X_encoded,y)


# In[22]:


joblib.dump(rf,'model_joblib_heart')


# In[23]:


model = joblib.load('model_joblib_heart')


# In[24]:


model.predict(new_data)


# In[ ]:


from tkinter import *
import joblib
def show_entry_fields():
    p1=float(e1.get())
    p2=float(e2.get())
    p3=float(e3.get())
    p4=float(e4.get())
    p5=int(e5.get())
    p6=int(e6.get())
    p7=int(e7.get())
    p8=int(e8.get())
    model = joblib.load('model_joblib_heart')
    result=model.predict([[p1,p2,p3,p4,p5,p6,p7,p8]])
    Label(master, text=print(result[0])).grid(row=31)
master = Tk()
master.title("smart farming")


label = Label(master, text = "smart farming"
                          , bg = "black", fg = "white"). \
                               grid(row=0,columnspan=2)


Label(master, text="Temperature").grid(row=1)
Label(master, text="humidity").grid(row=2)
Label(master, text="ph").grid(row=3)
Label(master, text="water availability").grid(row=4)
Label(master, text="season_rainy").grid(row=5)
Label(master, text="season_summer").grid(row=6)
Label(master, text="season_winter").grid(row=7)
Label(master, text="season_spring").grid(row=8)

e1 = Entry(master)
e2 = Entry(master)
e3 = Entry(master)
e4 = Entry(master)
e5 = Entry(master)
e6 = Entry(master)
e7 = Entry(master)
e8 = Entry(master)

e1.grid(row=1, column=1)
e2.grid(row=2, column=1)
e3.grid(row=3, column=1)
e4.grid(row=4, column=1)
e5.grid(row=5, column=1)
e6.grid(row=6, column=1)
e7.grid(row=7, column=1)
e8.grid(row=8, column=1)

Button(master, text='Predict', command=show_entry_fields).grid()

mainloop()
